// Generated by view binder compiler. Do not edit!
package com.example.namo.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.namo.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPlaceSearchBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView placeCancleBtn;

  @NonNull
  public final Button placeSearchBtn;

  @NonNull
  public final EditText placeSearchEt;

  @NonNull
  public final RelativeLayout placeSearchMapView;

  @NonNull
  public final TextView placeSearchNextPage;

  @NonNull
  public final TextView placeSearchPageNum;

  @NonNull
  public final TextView placeSearchPrevPage;

  @NonNull
  public final RecyclerView placeSearchRv;

  @NonNull
  public final TextView placeSelectBtn;

  @NonNull
  public final ConstraintLayout placeSelectBtnLayout;

  private ActivityPlaceSearchBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView placeCancleBtn, @NonNull Button placeSearchBtn,
      @NonNull EditText placeSearchEt, @NonNull RelativeLayout placeSearchMapView,
      @NonNull TextView placeSearchNextPage, @NonNull TextView placeSearchPageNum,
      @NonNull TextView placeSearchPrevPage, @NonNull RecyclerView placeSearchRv,
      @NonNull TextView placeSelectBtn, @NonNull ConstraintLayout placeSelectBtnLayout) {
    this.rootView = rootView;
    this.placeCancleBtn = placeCancleBtn;
    this.placeSearchBtn = placeSearchBtn;
    this.placeSearchEt = placeSearchEt;
    this.placeSearchMapView = placeSearchMapView;
    this.placeSearchNextPage = placeSearchNextPage;
    this.placeSearchPageNum = placeSearchPageNum;
    this.placeSearchPrevPage = placeSearchPrevPage;
    this.placeSearchRv = placeSearchRv;
    this.placeSelectBtn = placeSelectBtn;
    this.placeSelectBtnLayout = placeSelectBtnLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPlaceSearchBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPlaceSearchBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_place_search, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPlaceSearchBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.place_cancle_btn;
      TextView placeCancleBtn = ViewBindings.findChildViewById(rootView, id);
      if (placeCancleBtn == null) {
        break missingId;
      }

      id = R.id.place_search_btn;
      Button placeSearchBtn = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchBtn == null) {
        break missingId;
      }

      id = R.id.place_search_et;
      EditText placeSearchEt = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchEt == null) {
        break missingId;
      }

      id = R.id.place_search_map_view;
      RelativeLayout placeSearchMapView = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchMapView == null) {
        break missingId;
      }

      id = R.id.place_search_next_page;
      TextView placeSearchNextPage = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchNextPage == null) {
        break missingId;
      }

      id = R.id.place_search_page_num;
      TextView placeSearchPageNum = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchPageNum == null) {
        break missingId;
      }

      id = R.id.place_search_prev_page;
      TextView placeSearchPrevPage = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchPrevPage == null) {
        break missingId;
      }

      id = R.id.place_search_rv;
      RecyclerView placeSearchRv = ViewBindings.findChildViewById(rootView, id);
      if (placeSearchRv == null) {
        break missingId;
      }

      id = R.id.place_select_btn;
      TextView placeSelectBtn = ViewBindings.findChildViewById(rootView, id);
      if (placeSelectBtn == null) {
        break missingId;
      }

      id = R.id.place_select_btn_layout;
      ConstraintLayout placeSelectBtnLayout = ViewBindings.findChildViewById(rootView, id);
      if (placeSelectBtnLayout == null) {
        break missingId;
      }

      return new ActivityPlaceSearchBinding((ConstraintLayout) rootView, placeCancleBtn,
          placeSearchBtn, placeSearchEt, placeSearchMapView, placeSearchNextPage,
          placeSearchPageNum, placeSearchPrevPage, placeSearchRv, placeSelectBtn,
          placeSelectBtnLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
